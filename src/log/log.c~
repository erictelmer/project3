/****************************************************************
 *                                                              *
 *  log.c                                                       *
 *                                                              *
 *  Description: This file contains the description and methods *
 *  for creating a log file and writing to it.                  *
 *																*
 *  Code reused from Lauren's Project 1							*
 *                                                              *
 ***************************************************************/

#include "log.h"

int LogCreated = 0;

/*
 * open_log: function to open a new log file
 * Parameters:
 * 		path: path for file name
 * Returns: 
 * 		FILE *file: the logfile
 *
 * */
FILE *open_log(const char *path)
{
	FILE *file;

	/*Check that we haven't already created the log*/
	if (LogCreated == 1){
		file = fopen(path, "a");
	} else{
		file = fopen(path, "w");
		LogCreated = 1;
	}

	if (file == NULL){
		fprintf(stdout, "Error creating logfile. \n");
		LogCreated = 0;
		exit(EXIT_FAILURE);
	}

	/*Set buffering for file to be new line*/
	setvbuf(file, NULL, _IOFBF, 0);

	fputs("Log file created at:\n", file);
	Log(file, "\n\n");
	return file;
}


/*
 * Log: function to write to a log file
 * 		Uses a variable list in order to write information/settings
 * 		to the log from clients
 * Parameters:
 * 		message: to write to the log file
 * 		file : logfile to write to
 */
void Log(FILE *file, const char *message, ...){
	time_t rawtime;
	struct tm *timeinfo;
	char buffer[80];

	time(&rawtime);
	timeinfo = localtime(&rawtime);
	strftime(buffer, 80, "[%x %X] ", timeinfo);

	fprintf(file, buffer);
	fflush(file);
	va_list arg_point;
	va_start(arg_point, message);
	vfprintf(file, message, arg_point);
}


/*
 * close_log: function to close the log file
 * Parameters:
 * 		file: the logfile
 */
void close_log(FILE *file){
	Log(file, "Closing log file\n");
	fclose(file);
}
